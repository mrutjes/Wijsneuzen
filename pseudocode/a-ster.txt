Sven
def route_netlist(grid, netlist):
    for net in netlist:
        start, end = net
        path = a_star(grid, start, end)
        if path:
            for segment in path:
                grid.mark(segment)
        else:
            raise Exception("Net could not be routed")
    return grid

def a_star(grid, start, end):
    open_list = PriorityQueue()
    open_list.put((0, start))
    came_from = {}
    cost_so_far = {start: 0}

    while not open_list.empty():
        _, current = open_list.get()

        if current == end:
            return reconstruct_path(came_from, start, end)

        for neighbor in grid.get_neighbors(current):
            new_cost = cost_so_far[current] + grid.cost(neighbor)
            if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_cost
                priority = new_cost + heuristic(end, neighbor)
                open_list.put((priority, neighbor))
                came_from[neighbor] = current
    return None
